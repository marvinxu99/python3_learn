XML Schema:
===========
- Alternative way of specifying rules to DTDs
- Provide way to constrain XML document content
- Written using XML syntax
- Similar to DTAs, but more powerful and sophisticated
    * Finer level of control that DTAs allow
    * Schema and XML files always stored separately

Anatomy of a Schema:
====================
- Uses namespace http://www/w3.org/2001/XMLSchema
- Usually uses the "xsd" prefix

<xsd:schema xmlns:xsd="http://www/w3.org/2001/XMLSchema">
    <xsd:element name="ELemName">
        <!-- other content definitions go in here -->
    </xsd:element>
</xsd:schema>

Declaring Elements in Schema:
=============================
- Declared using <xsd:element> tag
- Can be declared as either simple or complex type
- Elements cab have mixed or empty element content
- Element can have min and max times they can occur
- Elements can be restricted to having certain values

Simple SChema Types:
====================
xsd:string
xsd:boolean
xsd:decimal
xsd:integer
xsd:postiveInteger
xsd:negativeInteger
xsd:anyURI
xsd:date
xsd:time
xsd:dateTime

Declaring Elements in Schema:
=============================
<xsd:element name="MyElement" type="xsd:string">
<xsd:eLement name="HireDate" type="xsd:date">
<xsd:element name="Friends" type="xsd:string" minoccurs="1" maxoccures="unbounded">
<xsd:element name="Phone" type="xsd:string" maxoccures="5">

Can declare custom types, derived from existing types.
<xsd:element name="InvitedGuests">
    <xsd:simpleType>
        <xsd:restriction base="xsd:postiveInteger:>
            <xsd:minInclusive value="0">
            <xsd:maxInclusive value="50">
        </xsd:restriction>
    </xsd:simpleType>
</xsd:element>
            <xsd:minExclusive value="0">
            <xsd:maxExclusive value="50">

Can restrict content to a range of choices
<xsd:element name="dwelling">
    <xsd:simpleType>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="house"/>
            <xsd:enumeration value="apartment"/>
            <xsd:enumeration value="trailer"/>
        </xsd:restriction>
    </xsd:simpleType
</xsd:element>    

restriction can even use regular expression patterns:
<xsd:element name="SSN">
    <xsd:simpleType>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="\d{3}-\d{2}-\d{4}"/>
        </xsd:restriction>
    </xsd:simpleType
</xsd:element>    

Decalring Comples Types:
========================
two ways:
- Use the xsd:anyType value for the type attribute - no restriction on the content

- Use the <xsd:complexType> tag in the definition

<xsd:element name="EmptyElem">
    <xsd:complexType>
    </xsd:complexType>
</xsd:element>

Declaring elements with mixed content:
<xsd:element name="title">
    <xsd:complexType mixed="true">
        <xsd:sequence>
            <xsd:element name="subtitle"/>
        <xsd:sequence>
    </xsd:complexType>
</xsd:element>

Declaring elements with element content:
<xsd:element name="address">
    <xsd:complexType>
        <xsd:sequence>
            <xsd:element name="num" type="xsd:integer"/>
            <xsd:element name="street" type="xsd:string"/>
            <xsd:element name="city" type="xsd:string"/>
            <xsd:element name="state" type="xsd:string"/>
        <xsd:sequence>
    </xsd:complexType>
</xsd:element>

Declaring elements with element content (choice):
<xsd:element name="vehicle">
    <xsd:complexType>
        <xsd:choice>
            <xsd:element name="car" type="xsd:string"/>
            <xsd:element name="bus" type="xsd:string"/>
            <xsd:element name="van" type="xsd:string"/>
            <xsd:element name="truck" type="xsd:string"/>
        <xsd:sequence>
    </xsd:complexType>
</xsd:element>

xsd:all - means elements can appear in any order.
<xsd:element name="CapitalCity">
    <xsd:complexType>
        <xsd:all>
            <xsd:element name="name" type="xsd:string"/>
            <xsd:element name="state" type="xsd:string"/>
            <xsd:element name="pop" type="xsd:positiveInteger"/>
        <xsd:all>
    </xsd:complexType>
</xsd:element>

